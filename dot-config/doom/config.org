#+title: Doom Emacs Configuration
#+author: Mark Olson (mho)
#+startup: fold

* Introduction
* Issues
* Environment Setup
** Windows
*** Size
Proportionally resize the size of the window.
#+begin_src emacs-lisp
(setq-default window-combination-resize t)
#+end_src
Setting up the default frame size
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(height . 34))
(add-to-list 'default-frame-alist '(width  . 80))
#+end_src
*** Line Numbers
This determines the style of line numbers in effect. If set to `nil', line
numbers appear. However, I prefer relative line numbers.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
*** Scrolling
A little margin looks good.
#+begin_src emacs-lisp
(setq scroll-preserve-screen position 'always
      scroll-margin 4)
#+end_src
** Cursor
Stretch the width of the block cursor to match the width of the glyph.
#+begin_src emacs-lisp
(setq-default x-stretch-cursor t)
#+end_src
** Files
Sending deleted files to the trash and use auto-save ... just in case.
#+begin_src emacs-lisp
(setq-default delete-by-moving-to-trash t)
(setq auto-save-default t)
#+end_src
Raising the undo limit to 80Mb
#+begin_src emacs-lisp
(setq undo-limit 80000000)
#+end_src
Let's also enable granular undo
#+begin_src emacs-lisp
(setq evil-want-fine-undo t)
#+end_src
** Fonts
If you or Emacs can't find your font, use ~M-x describe-font~ to look them up, ~M-x eval-region~ to execute elisp code, and ~M-x doom/reload-font~ to refresh your font settings. If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!
Doom exposes five variables for controlling fonts.
*** Doom Primary Font
I rather like the SF Mono font.
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "SF Mono" :size 21 ))
#+end_src
Making the ellipsis more pretty
#+begin_src emacs-lisp
(setq truncate-string-ellipsis "…")
#+end_src
*** Doom Variable Pitch Font
#+begin_src emacs-lisp
;;(setq doom-variable-pitch-font (font-spec :family "Source Code Pro" :size 13))
#+end_src
*** Doom Big Font
Let's Double the size for the Big Font.
#+begin_src emacs-lisp
(setq doom-big-font (font-spec :family "SF Mono" :size 42 ))
#+end_src
*** Doom Symbol Font
I also want to be able to insert SF Symbol fonts. Álvaro Ramírez has made this
possible:
https://xenodium.com/emacs-insert-and-render-sf-symbols/
The ~sf.el~ file can be found at:
https://github.com/xenodium/dotsies/blob/main/emacs/ar/sf.el.

#+begin_src emacs-lisp
(set-fontset-font t nil "SF Pro Display" nil 'append)
(load! "lisp/sf.el")
#+end_src
*** Doom Serif Font
** Keyboard
Since I am using using an Apple Swedish keyboard, it makes sence to define
the modifier keys such that:
- the option key can still be used to access commonly used symbols, and
- the meta and control keys are easily accessible with the thumbs.
#+begin_src emacs-lisp
(setq mac-option-modifier nil
      mac-command-modifier 'meta
      mac-right-command-modifier 'control
      mac-control-modifier 'super
      mac-function-modifier 'hyper)
#+end_src
** Security
*** Passwords
After how many seconds should emacs forget my passwords?  Well, I trust this machine so I will set it to nil.
#+begin_src emacs-lisp
(setq password-cache-expiry nil)
#+end_src
** Themes
I really like working in dark-mode using the doom-nord-aurora theme.
#+begin_src emacs-lisp
(setq doom-theme 'doom-nord-aurora)
#+end_src
** Modline
Showing time on the modline
#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src
* Convenience
** Global Keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "C-å") 'sp-wrap-curly)
;;(global-set-key (kbd "C-ä") 'sp-up-sexp)
(global-set-key (kbd "M-o") 'sp-up-sexp)
(global-set-key (kbd "M-w") 'save-buffer)
#+end_src
* Packages
*** Org-Anki
https://github.com/eyeinsky/org-anki
#+begin_src emacs-lisp
(use-package! anki-editor
  :after org
  ;;:config
  )
#+end_src
*** Calc
Taken from https://github.com/tecosaur/emacs-config/
#+begin_src emacs-lisp
(use-package! calctex
  :commands calctex-mode
  :init
  (add-hook 'calc-mode-hook #'calctex-mode)
  :config
  (setq calctex-additional-latex-packages "
\\usepackage[usenames]{xcolor}
\\usepackage{soul}
\\usepackage{adjustbox}
\\usepackage{amsmath}
\\usepackage{amssymb}
\\usepackage{siunitx}
\\usepackage{cancel}
\\usepackage{mathtools}
\\usepackage{mathalpha}
\\usepackage{xparse}
\\usepackage{arevmath}"
        calctex-additional-latex-macros
        (concat calctex-additional-latex-macros
                "\n\\let\\evalto\\Rightarrow"))
  (defadvice! no-messaging-a (orig-fn &rest args)
    :around #'calctex-default-dispatching-render-process
    (let ((inhibit-message t) message-log-max)
      (apply orig-fn args)))
  ;; Fix hardcoded dvichop path (whyyyyyyy)
  (let ((vendor-folder (concat (file-truename doom-local-dir)
                               "straight/"
                               (format "build-%s" emacs-version)
                               "/calctex/vendor/")))
    (setq calctex-dvichop-sty (concat vendor-folder "texd/dvichop")
          calctex-dvichop-bin (concat vendor-folder "texd/dvichop")))
  (unless (file-exists-p calctex-dvichop-bin)
    (message "CalcTeX: Building dvichop binary")
    (let ((default-directory (file-name-directory calctex-dvichop-bin)))
      (call-process "make" nil nil nil))))

(setq calc-angle-mode 'rad  ; radians are rad
      calc-symbolic-mode t) ; keeps expressions like \sqrt{2} irrational for as long as possible

(global-set-key (kbd "C-c e") #'calc-embedded)
(map! :after calc
      :map calc-mode-map
      :localleader
      :desc "Embedded calc (toggle)" "e" #'calc-embedded)
(map! :after org
      :map org-mode-map
      :localleader
      :desc "Embedded calc (toggle)" "E" #'calc-embedded)
(map! :after latex
      :localleader
      :map latex-mode-map
      :desc "Embedded calc (toggle)" "e" #'calc-embedded)

(defvar calc-embedded-trail-window nil)
(defvar calc-embedded-calculator-window nil)

(defadvice! calc-embedded-with-side-pannel (&rest _)
  :after #'calc-do-embedded
  (when calc-embedded-trail-window
    (ignore-errors
      (delete-window calc-embedded-trail-window))
    (setq calc-embedded-trail-window nil))
  (when calc-embedded-calculator-window
    (ignore-errors
      (delete-window calc-embedded-calculator-window))
    (setq calc-embedded-calculator-window nil))
  (when (and calc-embedded-info
             (> (* (window-width) (window-height)) 1200))
    (let ((main-window (selected-window))
          (vertical-p (> (window-width) 80)))
      (select-window
       (setq calc-embedded-trail-window
             (if vertical-p
                 (split-window-horizontally (- (max 30 (/ (window-width) 3))))
               (split-window-vertically (- (max 8 (/ (window-height) 4)))))))
      (switch-to-buffer "*Calc Trail*")
      (select-window
       (setq calc-embedded-calculator-window
             (if vertical-p
                 (split-window-vertically -6)
               (split-window-horizontally (- (/ (window-width) 2))))))
      (switch-to-buffer "*Calculator*")
      (select-window main-window))))
#+end_src

*** Org-Roam
* Languages
** LaTeX
** Markdown
** Org
** Python
