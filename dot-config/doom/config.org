#+title: Doom Emacs Configuration
#+author: Mark Olson (mho)
#+startup: fold

* Introduction
* Issues
* Environment Setup
** Windows
*** Size
Proportionally resize the size of the window.
#+begin_src emacs-lisp
(setq-default window-combination-resize t)
#+end_src
Setting up the default frame size
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(height . 34))
(add-to-list 'default-frame-alist '(width  . 80))
#+end_src
*** Line Numbers
This determines the style of line numbers in effect. If set to `nil', line
numbers appear. However, I prefer relative line numbers.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
*** Scrolling
A little margin looks good.
#+begin_src emacs-lisp
(setq scroll-preserve-screen position 'always
      scroll-margin 4)
#+end_src
** Cursor
Stretch the width of the block cursor to match the width of the glyph.
#+begin_src emacs-lisp
(setq-default x-stretch-cursor t)
#+end_src
** Files
Sending deleted files to the trash and use auto-save ... just in case.
#+begin_src emacs-lisp
(setq-default delete-by-moving-to-trash t)
(setq auto-save-default t)
#+end_src
Raising the undo limit to 80Mb
#+begin_src emacs-lisp
(setq undo-limit 80000000)
#+end_src
Let's also enable granular undo
#+begin_src emacs-lisp
(setq evil-want-fine-undo t)
#+end_src
** Fonts
If you or Emacs can't find your font, use ~M-x describe-font~ to look them up, ~M-x eval-region~ to execute elisp code, and ~M-x doom/reload-font~ to refresh your font settings. If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!
Doom exposes five variables for controlling fonts.
*** Doom Primary Font
I rather like the SF Mono font.
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "SF Mono" :size 21 ))
#+end_src
Making the ellipsis more pretty
#+begin_src emacs-lisp
(setq truncate-string-ellipsis "…")
#+end_src
*** Doom Variable Pitch Font
#+begin_src emacs-lisp
;;(setq doom-variable-pitch-font (font-spec :family "Source Code Pro" :size 13))
#+end_src
*** Doom Big Font
Let's Double the size for the Big Font.
#+begin_src emacs-lisp
(setq doom-big-font (font-spec :family "SF Mono" :size 42 ))
#+end_src
*** Doom Symbol Font
I also want to be able to insert SF Symbol fonts. Álvaro Ramírez has made this
possible:
https://xenodium.com/emacs-insert-and-render-sf-symbols/
The ~sf.el~ file can be found at:
https://github.com/xenodium/dotsies/blob/main/emacs/ar/sf.el.

#+begin_src emacs-lisp
(set-fontset-font t nil "SF Pro Display" nil 'append)
(load! "lisp/sf.el")
#+end_src
*** Doom Serif Font
** Keyboard
Since I am using using an Apple Swedish keyboard, it makes sence to define
the modifier keys such that:
- the option key can still be used to access commonly used symbols, and
- the meta and control keys are easily accessible with the thumbs.
#+begin_src emacs-lisp
(setq mac-option-modifier nil
      mac-command-modifier 'meta
      mac-right-command-modifier 'control
      mac-control-modifier 'super
      mac-function-modifier 'hyper)
#+end_src
** Security
*** Passwords
After how many seconds should emacs forget my passwords?  Well, I trust this machine so I will set it to nil.
#+begin_src emacs-lisp
(setq password-cache-expiry nil)
#+end_src
** Themes
I really like working in dark-mode using the doom-nord-aurora theme.
#+begin_src emacs-lisp
(setq doom-theme 'doom-nord-aurora)
#+end_src
** Modline
Showing time on the modline
#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src
* Convenience
** Global Keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "C-å") 'sp-wrap-curly)
;;(global-set-key (kbd "C-ä") 'sp-up-sexp)
(global-set-key (kbd "M-o") 'sp-up-sexp)
(global-set-key (kbd "M-w") 'save-buffer)
#+end_src
* Packages
*** Org-Anki
https://github.com/eyeinsky/org-anki
#+begin_src emacs-lisp
(use-package! anki-editor
  :after org
  ;;:config
  )
#+end_src
*** Calc
Taken from https://github.com/tecosaur/emacs-config/
#+begin_src emacs-lisp
(use-package! calctex
  :commands calctex-mode
  :init
  (add-hook 'calc-mode-hook #'calctex-mode)
  :config
  (setq calctex-additional-latex-packages "
\\usepackage[usenames]{xcolor}
\\usepackage{soul}
\\usepackage{adjustbox}
\\usepackage{amsmath}
\\usepackage{amssymb}
\\usepackage{siunitx}
\\usepackage{cancel}
\\usepackage{mathtools}
\\usepackage{mathalpha}
\\usepackage{xparse}
\\usepackage{arevmath}"
        calctex-additional-latex-macros
        (concat calctex-additional-latex-macros
                "\n\\let\\evalto\\Rightarrow"))
  (defadvice! no-messaging-a (orig-fn &rest args)
    :around #'calctex-default-dispatching-render-process
    (let ((inhibit-message t) message-log-max)
      (apply orig-fn args)))
  ;; Fix hardcoded dvichop path (whyyyyyyy)
  (let ((vendor-folder (concat (file-truename doom-local-dir)
                               "straight/"
                               (format "build-%s" emacs-version)
                               "/calctex/vendor/")))
    (setq calctex-dvichop-sty (concat vendor-folder "texd/dvichop")
          calctex-dvichop-bin (concat vendor-folder "texd/dvichop")))
  (unless (file-exists-p calctex-dvichop-bin)
    (message "CalcTeX: Building dvichop binary")
    (let ((default-directory (file-name-directory calctex-dvichop-bin)))
      (call-process "make" nil nil nil))))

(setq calc-angle-mode 'rad  ; radians are rad
      calc-symbolic-mode t) ; keeps expressions like \sqrt{2} irrational for as long as possible

(global-set-key (kbd "C-c e") #'calc-embedded)
(map! :after calc
      :map calc-mode-map
      :localleader
      :desc "Embedded calc (toggle)" "e" #'calc-embedded)
(map! :after org
      :map org-mode-map
      :localleader
      :desc "Embedded calc (toggle)" "E" #'calc-embedded)
(map! :after latex
      :localleader
      :map latex-mode-map
      :desc "Embedded calc (toggle)" "e" #'calc-embedded)

(defvar calc-embedded-trail-window nil)
(defvar calc-embedded-calculator-window nil)

(defadvice! calc-embedded-with-side-pannel (&rest _)
  :after #'calc-do-embedded
  (when calc-embedded-trail-window
    (ignore-errors
      (delete-window calc-embedded-trail-window))
    (setq calc-embedded-trail-window nil))
  (when calc-embedded-calculator-window
    (ignore-errors
      (delete-window calc-embedded-calculator-window))
    (setq calc-embedded-calculator-window nil))
  (when (and calc-embedded-info
             (> (* (window-width) (window-height)) 1200))
    (let ((main-window (selected-window))
          (vertical-p (> (window-width) 80)))
      (select-window
       (setq calc-embedded-trail-window
             (if vertical-p
                 (split-window-horizontally (- (max 30 (/ (window-width) 3))))
               (split-window-vertically (- (max 8 (/ (window-height) 4)))))))
      (switch-to-buffer "*Calc Trail*")
      (select-window
       (setq calc-embedded-calculator-window
             (if vertical-p
                 (split-window-vertically -6)
               (split-window-horizontally (- (/ (window-width) 2))))))
      (switch-to-buffer "*Calculator*")
      (select-window main-window))))
#+end_src

*** Org-Roam
**** Customizations
***** Rename Buffer and File Name
Rename the current buffer and the file name based on the org-roam properties. This will also work in Dired at the point or for marked files.
#+begin_src emacs-lisp
(defun rename-buffer-and-file-based-on-org-roam ()
  "Rename the current buffer and the file it is visiting based on Org-roam ID and Title.
If in dired mode, rename the selected file instead."
  (interactive)
  (if (derived-mode-p 'dired-mode)
      ;; Handle renaming in dired mode
      (let ((file (dired-get-file-for-visit)))
        (with-temp-buffer
          (insert-file-contents file)
          (let (id title new-name)
            ;; Extract the ID
            (when (re-search-forward "^:ID:\\s-+\\([A-Za-z0-9-]+\\)" nil t)
              (setq id (match-string 1)))
            ;; Extract the Title
            (goto-char (point-min))
            (when (re-search-forward "^#\\+TITLE:\\s-+\\(.+\\)" nil t)
              (setq title (match-string 1)))
            ;; Convert Title to kebab-case
            (when title
              (setq title (replace-regexp-in-string "[^a-zA-Z0-9]+" "-" (downcase title)))
              (setq new-name (concat id "-" title)))
            ;; Rename file
            (when (and id title)
              (let ((new-file-name (concat (file-name-directory file) new-name ".org")))
                (rename-file file new-file-name 1)
                (revert-buffer)
                (dired-revert)
                (message "Renamed %s to %s" file new-file-name))))))
    ;; Handle renaming in org-mode
    (when (derived-mode-p 'org-mode)
      (save-excursion
        (goto-char (point-min))
        (let (id title new-name)
          ;; Extract the ID
          (when (re-search-forward "^:ID:\\s-+\\([A-Za-z0-9-]+\\)" nil t)
            (setq id (match-string 1)))
          ;; Extract the Title
          (goto-char (point-min))
          (when (re-search-forward "^#\\+TITLE:\\s-+\\(.+\\)" nil t)
            (setq title (match-string 1)))
          ;; Convert Title to kebab-case
          (when title
            (setq title (replace-regexp-in-string "[^a-zA-Z0-9]+" "-" (downcase title)))
            (setq new-name (concat id "-" title)))
          ;; Rename buffer and file
          (when (and id title)
            (let ((new-file-name (concat (file-name-directory (buffer-file-name)) new-name ".org")))
              (rename-file (buffer-file-name) new-file-name 1)
              (set-visited-file-name new-file-name)
              (rename-buffer new-name)
              (save-buffer)
              (message "Renamed buffer and file to %s" new-name))))))))

(global-set-key (kbd "C-c r") 'rename-buffer-and-file-based-on-org-roam)
#+end_src
***** TagID Generator
#+begin_src emacs-lisp
(defun mho/gen-id ()
  "Generate a full_id composed of a date stamp and the first available ID from a
   file, prompt the user before deleting the line, and save the ID to the kill
   ring."
  (interactive)
  (let* ((id-file "~/Documents/mho-roam/resources/code/shell/TAGS-tagids.txt")  ; Adjust the path as needed
         ;;(date-str (format-time-string "%y%m%d"))
         (buffer (find-file-noselect id-file))
         full_id)
    (with-current-buffer buffer
      (goto-char (point-min))
      (let ((first-id (buffer-substring-no-properties (point) (line-end-position))))
        ;;(setq full_id (concat date-str "--" first-id))  ; Changed format for clarity
        (setq full_id first-id)  ; Changed format for clarity
        (if (yes-or-no-p (format "Delete the first line containing ID: %s?" first-id))
            (progn
              (delete-region (point) (1+ (line-end-position)))
              (save-buffer)
              (kill-buffer)
              (kill-new full_id)
              (message "ID %s saved to kill ring" full_id))
          (message "ID generation aborted"))))))
#+end_src
***** Auto Generate Org-Roam ID
#+begin_src emacs-lisp
(defvar mho/org-roam-last-id nil "Cache the last generated ID for reuse in the same capture session.")

(defun get-and-update-full-id ()
  ;; "Generate a full_id composed of a date stamp and the first available ID from a file."
  (unless mho/org-roam-last-id
    (setq mho/org-roam-last-id
          (let* ((id-file "~/Documents/mho-roam/resources/code/shell/TAGS-tagids.txt")  ; Adjust the path as needed
                 ;;(date-str (format-time-string "%y%m%d"))
                 (buffer (find-file-noselect id-file))
                 full_id)
            (with-current-buffer buffer
              (goto-char (point-min))
              (let ((first-id (buffer-substring-no-properties (point) (line-end-position))))
                ;;(setq full_id (concat date-str "--" first-id))  ; Changed format for clarity
                (setq full_id first-id)  ; Changed format for clarity
                (delete-region (point) (1+ (line-end-position)))
                (save-buffer)
                (kill-buffer))
              full_id))))
  mho/org-roam-last-id)

(add-hook 'org-capture-after-finalize-hook (lambda () (setq mho/org-roam-last-id nil)))
#+end_src
**** Setup
#+begin_src emacs-lisp
(setq org-roam-directory "~/Documents/mho-roam")


(use-package! org-roam
  :config
  (cl-defmethod org-roam-node-slug ((node org-roam-node))
    "Return the slug of NODE."
    (let ((title (org-roam-node-title node))
          (slug-trim-chars '(;; Combining Diacritical Marks https://www.unicode.org/charts/PDF/U0300.pdf
                             768 ; U+0300 COMBINING GRAVE ACCENT
                             769 ; U+0301 COMBINING ACUTE ACCENT
                             770 ; U+0302 COMBINING CIRCUMFLEX ACCENT
                             771 ; U+0303 COMBINING TILDE
                             772 ; U+0304 COMBINING MACRON
                             774 ; U+0306 COMBINING BREVE
                             775 ; U+0307 COMBINING DOT ABOVE
                             776 ; U+0308 COMBINING DIAERESIS
                             777 ; U+0309 COMBINING HOOK ABOVE
                             778 ; U+030A COMBINING RING ABOVE
                             779 ; U+030B COMBINING DOUBLE ACUTE ACCENT
                             780 ; U+030C COMBINING CARON
                             795 ; U+031B COMBINING HORN
                             803 ; U+0323 COMBINING DOT BELOW
                             804 ; U+0324 COMBINING DIAERESIS BELOW
                             805 ; U+0325 COMBINING RING BELOW
                             807 ; U+0327 COMBINING CEDILLA
                             813 ; U+032D COMBINING CIRCUMFLEX ACCENT BELOW
                             814 ; U+032E COMBINING BREVE BELOW
                             816 ; U+0330 COMBINING TILDE BELOW
                             817 ; U+0331 COMBINING MACRON BELOW
                             )))
      (cl-flet* ((nonspacing-mark-p (char) (memq char slug-trim-chars))
                 (strip-nonspacing-marks (s) (string-glyph-compose
                                              (apply #'string
                                                     (seq-remove #'nonspacing-mark-p
                                                                 (string-glyph-decompose s)))))
                 (cl-replace (title pair) (replace-regexp-in-string (car pair) (cdr pair) title)))
        (let* ((pairs `(("[^[:alnum:][:digit:]-]" . "-") ;; convert anything not alphanumeric
                        ))                   ;; remove ending underscore
               (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))(downcase slug)))))
  (setq org-roam-node-display-template
        (concat "${id:4}" " " "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (setq org-roam-capture-templates
        '(("d" "default" plain "%?"
           :target
           (file+head "%(get-and-update-full-id)-${slug}.org" ":PROPERTIES:\n:ID: %(get-and-update-full-id)\n:END:\n#+title: ${title}\n#+date: [%<%Y-%m-%d %a %H:%S>]\n#+filetags:\n\n")
           ;; The below was used to generate unique IDs based on a unique YYYYMMDDTHHMMSS ID
           ;;(file+head "%<%y%m%d_%H%M%S>-${slug}.org" ":PROPERTIES:\n:ID: %<%y%m%d_%H%M%S>\n:END:\n#+title: ${title}\n#+date: [%<%Y-%m-%d %a %H:%S>]\n#+filetags: \n#+identifier: %<%Y%m%d_%H%M%S>\n\n")
           :immediate-finish t
           :unnarrowed t))))

(setq org-roam-file-ignore-regexp (rx (or "resources" "typst" "daily" "anki" ".pdf" ".typ")))
(use-package! websocket
  :after org-roam)
(use-package! org-roam-ui
  :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src
*** Org-Transclusion
https://github.com/nobiot/org-transclusion
#+begin_src emacs-lisp
(use-package! org-transclusion
  :after org
  :init
  (map!
   :map global-map "C-ö C-h" #'org-transclusion-remove-all
   :map global-map "C-ö C-v" #'org-transclusion-add
   :leader
   :prefix "n"
   :desc "Org Transclusion Mode" "t" #'org-transclusion-mode))
#+end_src
* Languages
** LaTeX
** Markdown
** Org
** Python
